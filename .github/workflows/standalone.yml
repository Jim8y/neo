name: Build & Release (neo-cli)

on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: 'Version Number (Example: 1.0.0)'
        required: true

env:
  DOTNET_VERSION: 7.0.x
  CONFIGURATION: Release
  DIST_PATH: /tmp/dist
  OUTPUT_PATH: /tmp/out

jobs:
  build-leveldb:
    name: Build leveldb (windows-latest)
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, arm64]

    steps:
    - name: Lookup Cache Distribution
      id: cahce-leveldb
      uses: actions/cache@v3
      with:
        path: ./leveldb/build/Release/*
        key: leveldb-windows-${{ matrix.arch }}
        enableCrossOsArchive: true
        #lookup-only: true # Check out issue https://github.com/actions/cache/issues/1301

    - if: ${{ steps.cache-leveldb.outputs.cache-hit != 'true' }}
      name: Checkout Repository Code (leveldb)
      uses: actions/checkout@v4
      with:
        repository: google/leveldb
        path: leveldb
        submodules: true
        fetch-depth: 0

    - if: ${{ steps.cache-leveldb.outputs.cache-hit != 'true' }}
      name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1

    - if: ${{ steps.cache-leveldb.outputs.cache-hit != 'true' }}
      name: Setup LevelDb
      working-directory: ./leveldb
      run: mkdir -p ./build/Release

    - if: ${{ steps.cache-leveldb.outputs.cache-hit != 'true' }}
      name: Create Build Files (win-${{ matrix.arch }})
      working-directory: ./leveldb/build
      run: cmake -DBUILD_SHARED_LIBS=ON -A ${{ matrix.arch }} ..

    - if: ${{ steps.cache-leveldb.outputs.cache-hit != 'true' }}
      name: Build (MSBuild)
      working-directory: ./leveldb/build
      run: msbuild ./leveldb.sln /p:Configuration=Release

    - if: ${{ steps.cache-leveldb.outputs.cache-hit != 'true' }}
      name: Cache Distribution
      uses: actions/cache@v3
      with:
        path: ./leveldb/build/Release/*
        key: leveldb-windows-${{ matrix.arch }}
        enableCrossOsArchive: true

  build-neo-cli:
    needs: [build-leveldb]
    name: Build (${{ matrix.runtime }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        runtime: [linux-x64, linux-arm64, linux-musl-arm64, osx-x64, osx-arm64, win-x64, win-arm64]

    steps:
    - name: Checkout Repository Code
      uses: actions/checkout@v4
      with:
        path: neo
        fetch-depth: 0

    - name: Checkout Repository Code (neo-modules)
      uses: actions/checkout@v4
      with:
        repository: neo-project/neo-modules
        path: neo-modules
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: .NET Publish (neo-cli)
      working-directory: ./neo
      run: |
        dotnet publish ./src/Neo.CLI \
        --framework net7.0 \
        --configuration ${{ env.CONFIGURATION }} \
        --runtime ${{ matrix.runtime }} \
        --self-contained true \
        --output ${{ env.OUTPUT_PATH }}/${{ matrix.runtime }} \
        --verbosity normal \
        -p:RuntimeIdentifier=${{ matrix.runtime }} \
        -p:SelfContained=true \
        -p:IncludeNativeLibrariesForSelfExtract=false \
        -p:PublishTrimmed=false \
        -p:PublishSingleFile=true \
        -p:PublishReadyToRun=true \
        -p:EnableCompressionInSingleFile=true \
        -p:DebugType=embedded \
        -p:ServerGarbageCollection=true

    - name: .NET Build (LevelDBStore)
      working-directory: ./neo-modules
      run: |
        dotnet build ./src/LevelDBStore/LevelDBStore.csproj \
        --framework net7.0 \
        --configuration ${{ env.CONFIGURATION }} \
        --output ${{ env.OUTPUT_PATH }}/${{ matrix.runtime }}/Plugins/LevelDBStore \
        --verbosity normal

    - name: Remove Xml Comment Files
      working-directory: ${{ env.OUTPUT_PATH }}/${{ matrix.runtime }}
      run: rm -v *.xml

    - if: ${{ startsWith(matrix.runtime, 'win-x64') }}
      name: Get Distribution Caches (win-x64)
      uses: actions/cache@v3
      with:
        path: ./leveldb/build/Release/*
        key: leveldb-windows-x64
        enableCrossOsArchive: true
        fail-on-cache-miss: true

    - if: ${{ startsWith(matrix.runtime, 'win-arm64') }}
      name: Get Distribution Caches (win-arm64)
      uses: actions/cache@v3
      with:
        path: ./leveldb/build/Release/*
        key: leveldb-windows-arm64
        enableCrossOsArchive: true
        fail-on-cache-miss: true

    - if: ${{ startsWith(matrix.runtime, 'win') }}
      name: Copy Files (leveldb) (win)
      run: cp -v ./leveldb/build/Release/leveldb.dll ${{ env.OUTPUT_PATH }}/${{ matrix.runtime }}/libleveldb.dll

    - name: Copy Files (leveldb) (linux)
      if: ${{ startsWith(matrix.runtime, 'linux') }}
      run: cp -v ./leveldb/build/Release/libleveldb.so ${{ env.OUTPUT_PATH }}/${{ matrix.runtime }}/libleveldb.so

    - name: Create Distribution Directory
      run: mkdir -p ${{ env.DIST_PATH }}

    - name: Create Tarball File (linux)
      if: ${{ startsWith(matrix.runtime, 'linux') }}
      working-directory: ${{ env.OUTPUT_PATH }}/${{ matrix.runtime }}
      run: tar -czvf ${{ env.DIST_PATH }}/neo-cli-${{ github.event.inputs.version }}-${{ matrix.runtime }}.tar.gz .

    - name: Create Tarball File (osx)
      if: ${{ startsWith(matrix.runtime, 'osx') }}
      working-directory: ${{ env.OUTPUT_PATH }}/${{ matrix.runtime }}
      run: tar -cJf ${{ env.DIST_PATH }}/neo-cli-${{ github.event.inputs.version }}-${{ matrix.runtime }}.tar.xz .

    - name: Create Zip File (win)
      if: ${{ startsWith(matrix.runtime, 'win') }}
      working-directory: ${{ env.OUTPUT_PATH }}/${{ matrix.runtime }}
      run: zip ${{ env.DIST_PATH }}/neo-cli-${{ github.event.inputs.version }}-${{ matrix.runtime }}.zip -r *

    - name: Output/Distribution Directory Contents
      run: |
        ls -l ${{ env.DIST_PATH }}
        ls -l ${{ env.OUTPUT_PATH }}/${{ matrix.runtime }}

    - name: Cache Distribution
      uses: actions/cache@v3
      with:
        path: ${{ env.DIST_PATH }}/*
        key: ${{ matrix.runtime }}

  Release-neo-cli:
    name: Release (github)
    needs: [build-neo-cli]
    runs-on: ubuntu-latest

    steps:
    - name: Get Distribution Caches (linux-x64)
      uses: actions/cache/restore@v3
      with:
        path: ${{ env.DIST_PATH }}/*
        key: linux-x64

    - name: Get Distribution Caches (linux-arm64)
      uses: actions/cache/restore@v3
      with:
        path: ${{ env.DIST_PATH }}/*
        key: linux-arm64

    - name: Get Distribution Caches (linux-musl-arm64)
      uses: actions/cache/restore@v3
      with:
        path: ${{ env.DIST_PATH }}/*
        key: linux-musl-arm64

    - name: Get Distribution Caches (osx-x64)
      uses: actions/cache/restore@v3
      with:
        path: ${{ env.DIST_PATH }}/*
        key: osx-x64

    - name: Get Distribution Caches (osx-arm64)
      uses: actions/cache/restore@v3
      with:
        path: ${{ env.DIST_PATH }}/*
        key: osx-arm64

    - name: Get Distribution Caches (win-x64)
      uses: actions/cache/restore@v3
      with:
        path: ${{ env.DIST_PATH }}/*
        key: win-x64

    - name: Get Distribution Caches (win-arm64)
      uses: actions/cache/restore@v3
      with:
        path: ${{ env.DIST_PATH }}/*
        key: win-arm64

    - name: Publish Release (github)
      uses: marvinpinto/action-automatic-releases@latest
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        prerelease: false
        title: "v${{ github.event.inputs.version }}"
        automatic_release_tag: "v${{ github.event.inputs.version }}"
        files: ${{ env.DIST_PATH }}/*

